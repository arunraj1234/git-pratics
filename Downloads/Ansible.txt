Ansible
========================================================
Day 1
=========================================================



Configuration Management
=============================
This is the process of configuring applications remotely on
multiple servers from one point of control

Advantages
==============
1 Provisioning of Servers
  Activites like installing patches,deleting applications,
installing and upgrading s/w etc can be done very quickly on any
number of servers

2 Useful in Disaster Recovery
  In disaster recovery scenarios when an entire data center can go
bad we have to maintain a replica data center in some other location
Creation of such replica data center can be done easily using 
configuration management tools

3 Handling Snowflake Servers
  After a point of time each server present in a data center can behave
like a snow flake ie it can be running on different h/w and s/w configurations
Configuration Management tools can capture this information and store
in simple files called as "setup" files which can be used for configuring
similar environments

4 Idempotent
  Configuration Management tools are used to bring the servers to a
specific state called as "Desired state".If the remote servers are in the
desired state Configuration Management tools will not reconfigure
that server

Poplular configuration managment tools
==============================================
1 Ansible
2 Chef
3 Puppet
4 Saltstack

Ansible
===============
This is an opensource configuration managment tool created using python
The main machine where ansible is installed is called as Controller
and the remaining servers are called as managed nodes/managed hosts

Ansible is called as "agentless" as it doesnot require any client
side s/w .It perfroms remote configuration using "push" methodology
This is done via passwordless ssh
Day-2
=========================================================================
Setup of Ansible
====================
1 Create 3 or 4 AWS ubuntu 18 instances
2 NAme the 1st one as controller and remaining 2 as server1 and server2
3 Establish Passwordless ssh from Controller to Server1 and Server2
  a) Connect to server1 using gitbash
  b) Setup password for the default user
     sudo passwd ubuntu
  c) Edit the ssh configuration file
     sudo vim /etc/ssh/sshd_config
     Search for "PasswordAuthentication" and change it from no to yes
  d) Restart ssh
     sudo service ssh restart
     Repeat the above steps from a to d on Server2 managed node
  e) Connect to Controller using git bash
  f) Generate the ssh keys
     ssh-keygen
  g) Copy the ssh keys
     ssh-copy-id ubuntu@private_ip_of_server1
     Repeat step g with ipaddress of Server2

4 Installing Ansible
  a) Update the apt repository
     sudo apt-get update
  b) Install software-properties-common
     sudo apt-get install -y software-properties-common
  c) Add the latest version of Ansible to apt repository
     sudo apt-add-repository ppa:ansible/ansible
  d) Update the apt repository
     sudo apt-get update
  e) Install ansible
     sudo apt-get install -y ansible

5 To check the verision of ansible
  ansible --version

Ansible stores all the remote servers info in a file called as inventory file
We should open this file and store the ipaddress of all the managed nodes here

sudo vim /etc/ansible/hosts
Here copy and paste the ipaddresses of the managed nodes









Ansible can perform remote configuration of servers in
3 different ways
1 Adhoc commands
2 Playbooks
3 Roles

Ansible uses inbuilt python modules to do the configurations
on remote servers

Important modules in Ansible
================================
command: This is used to execute linux commands on the remote servers
This is the default module of ansible

shell: This is used to execute shell scripts or commands involving
redirection and piping on the managed nodes

ping: This is used to check if the remote managed nodes are pingable 
or not

user: Used for user management of the remote servers like creating user
accounts,setting password,assigning home directories etc

file: Used to create/delete files and directories on the managed nodes

copy: USed for copying files/directories to managed nodes

fetch: Used to copy files/directories from managed nodes to controller

apt: This is used for s/w package management on remote servers
      like installing packages,upgrading deleting etc.It works on
      ubuntu flavour servers

yum: This is similar to apt but it works on centos,redhat etc

service: This is used to start stop and restart services on managed nodes

git: This is used to perform git version controlling on managed nodes

uri: This is used to check if a remote url is reachable from the managed node

get_url: This is used to download files from servers into the managed nodes

debug: Used to display out put of other modules in JSON file format

stat: Capture info about files and folders on managed nodes

include: USed to call child playbooks from a parent playbook

replace: Used to replace some section of the text in a file

pause: Used to pause the execution of playbook for some time

docker_container: Used to perfrom docker container activites on managed nodes

docker_image: Used to run docker image related commands on managed nodes

docker_login: Used to login into docker registry

Adhoc command syntax
==========================
ansible all/group_name/ipadresss -i path_of_inventory -m module_name -a 'arguments'




Command Module
=====================
Ansible command to see the memory info of all managed nodes
ansible all -i /etc/ansible/hosts -m command -a 'free' 


Note: /etc/ansible/hosts is the default inventory file and when using it
it is not manadatory to use -i option in the adhoc command
ansible all  -m command -a 'free'

Note: command module is the deafult module of ansible and when using it
we need not use -m option
ansible all   -a 'free'


Shell Module
======================
Ansible command to install docker on all the managed nodes
a) Downlaod the shell script for docker
   ansible all -m shell -a 'curl -fsSL https://get.docker.com -o get-docker.sh'
b) Execute the shell script to install docker
  ansible all -m shell -a 'sh get-docker.sh'

=======================================================================
Day 3
=========================================================================
Ansible command to capture memory info of all managed nodes and store in file1
ansible all -m shell -a 'free -m > file1'

===================================================================


User Module
================
1 Create a user and set a password
  ansible all -m user -a 'name=Sai password=intelliqit' -b

Note: -b represents "become" this is used for giving higher previlages on the
remote servers

2 Create user and set home dir,uid,shell,comment etc
  ansible all -m user -a 'name=Lakshmi password=intelliqit 
          home=/home/Lakshmi comment="A nromal user" uid=1111 shell=/bin/bash' -b

=====================================================================
file Module
===============
1 Ansible command to create a file on all managed nodes
  ansible all -m file -a 'name=/tmp/file1 state=touch'

Note: state=touch is for creating files
state=directory is for creating directories
state=absent is for deleting files or directories

File module can also control the ownership group owner ship and permissions
of files and directories created on managed nodes
ansible all -m file -a 'name=file1 state=touch owner=Sai group=Lakshmi mode=760' -b


=============================================================================
copy Module
===============
Ansible command to a file from the controler to managed nodes
ansible all -m copy -a 'src=file100 dest=/tmp'

Copy module can not only copy files it can also change the ownership
groupownership and permissions of files
ansible all -m copy -a 'src=file100 dest=/tmp owner=root group=Sai mode=700' -b

Copy module can also change the content of a file
ansible all -m copy -a 'src=file1 dest=/home/ubuntu/file2'

================================================================================
apt Module
================
Ansible command to uninstall git from all managed nodes
ansible all -m apt -a 'name=git state=absent' -b

Note: state=present is for installation
state=absent is for uninstallation
state=latest is for upgrading to a later version

To update the apt reposiotry and then install tree we use update_cache=yes
ansible all -m apt -a 'name=tree state=absent update_cache=yes' -b

Scenario
==============
Install tomcat8,tomcat8-admin and copy tomcat-users.xml file

1 Install tomcat8
  ansible all -m apt -a 'name=tomcat8 state=present' -b

2 Install tomcat8-admin
  ansible all -m apt -a 'name=tomcat8-admin state=present' -b

3 Create tomcat-users.xml file
  vim tomcat-users.xml
  <tomcat-users>
     <user username="intelliqit" password="intelliqit" roles="manager-script"/>
  </tomcat-users>

4 Copy the tomcat-users.xml file to all managed nodes
  ansible all -m copy -a 'src=tomcat-users.xml dest=/etc/tomcat8' -b

========================================================================
Day 4
==========================================================================


ServiceModule
====================
Ansible command to restart tomcat8 on all managed nodes
ansible all -m service -a 'name=tomcat8 state=restarted' -b

Note: state=started is for starting a service
state=stopped is for stopping
state=restarted is for restarting a service

=======================================================================
git Module
================
Clone a remote git repo into all managed nodes
ansible all -m git -a 'repo=https://github.com/intelliqittrainings/Kubernetes_demo.git dest=/tmp/dir1'

=======================================================================

Fetch module
========================
Copy the /etc/passwd file from all managed nodes
ansible all -m fetch -a 'src=/etc/passwd dest=/tmp'

Copy a file from one managed node to another managed node
-----------------------------------------------------------------
1 Fetch file from 1st managed node
  ansible 172.31.36.172 -m fetch -a 'src=file1 dest=/tmp'

2 Copy that fetched file into managed node 2
  ansible 172.31.37.220 -m copy -a 'src=/tmp/172.31.36.172/file1 dest=/home/ubuntu'

=============================================================================
replace module
===================
Ansible command to change the port of tomcat from 8080 to 9090
ansible all -m replace -a 'regexp=8080 replace=9090 path=/etc/tomcat8/server.xml' -b
ansible all -m service -a 'name=tomcat8 state=restarted' -b

===============================================================================
uri module
===================
Ansible command to check if google is reachable from all managed nodes
ansible all -m uri -a 'url=http://google.com status_code=200'

Note: status_code=200 is success
status_code=-1 is failure

=============================================================================
Configuring apache2
Install apache2 edit the default index.html file,restart apache2
and check if the apache2 is reachable or not

1 Install apache2
  ansible all -m apt -a 'name=apache2 state=present update_cache=yes' -b

2 Edit index.html file
  ansible all -m copy -a 'content="Welcome to IntelliQIT"                                           dest=/var/www/html/index.html' -b

3 Restart apache2
  ansible all -m service -a 'name=apache2 state=restarted' -b
 
4 Check url response of apache2 from all managed nodes
  ansible all -m uri -a 'url=http://172.31.37.220 status_code=200'
  ansible all -m uri -a 'url=http://172.31.36.172 status_code=200'

==================================================================================
get_url
=============
Ansible command to download jenkins.war on all managed nodes
 ansible all -m get_url -a 
          'url=http://mirrors.jenkins.io/war-stable/latest/jenkins.war dest=/tmp'


===========================================================================
Day 5
===========================================================================
Configuring tomcat8
Install tomcat8,copy tomcat-users.xml file,change port of tomcat
from 8080 to 9090 and restart tomcat8,check if tomcat is
reachable from all managed nodes

1 Install tomcat8
  ansible all -m apt -a 'name=tomcat8 state=present' -b

2 Copy the tomcat-users.xml file
  ansible all -m copy -a 'src=tomcat-users.xml dest=/etc/tomcat8' -b

3 Change port of tomcat from 8080 to 9090
  ansible all -m replace -a 'regexp=8080 replace=9090 
                                      path=/etc/tomcat8/server.xml' -b

4 Restart tomcat8
   ansible all -m service -a 'name=tomcat8 state=restarted' -b             

5 Check the url response of tomcat on all manged nodes
  ansible all -m uri -a 'url=http://172.31.37.220:9090 status_code=200'   
  ansible all -m uri -a 'url=http://172.31.36.172:9090 status_code=200'


===============================================================================
Playbooks
=============
Adhoc command are capable of working on only one module and 
only one set of arguments.For performing complex configuration
management activites adhoc command are difficult to handle
Instead we can use ansible playbooks
Playbooks are created using yml and a playbook is a combination of
plays.Each play is designed to perfrom specific activity on the 
managed nodes.These playbooks are designed to work on a single
managed nodes,group of nodes or all the nodes
The main advantage of playbooks over adhoc commands is reusability

Ansible playbook to create a user on managed nodes
vim playbook1.yml
---
- name: Create users on managed node
  hosts: all
  tasks:
   - name: Create a user
     user:
      name: Anu
      password: intelliqit
      uid: 1357
      home: /home/Anu
      shell: /bin/bash
...

To check if the playbook is created syntaxtically correct or not
ansible-playbook playbook1.yml --syntax-check

To execute the playbook
ansible-playbook playbook1.yml -b

==================================================================
Ansible playbook for configuring apache2
vim playbook2.yml
---
- name: Configuring apache2
  hosts: all
  tasks:
   - name: Install apache2
     apt:
      name: apache2
      state: present
      update_cache: yes
   - name: Edit the index.html file
     copy:
      content: "IntelliQIT"
      dest: /var/www/html/index.html
   - name: Restart apache2
     service:
      name: apache2
      state: restarted
   - name: Check url response of server1
     uri:
      url: http://172.31.37.220
      status_code: 200
   - name: Check url response of server2
     uri:
      url: http://172.31.36.172
      status_code: 200
...
============================================================
Ansible playbook for configuring tomcat
vim playbook3.yml
---
- name: Configuring tomcat
  hosts: all
  tasks:
   - name: Install tomcat8
     apt:
      name: tomcat8
      state: present
   - name: Copy tomcat-users.xml file
     copy:
      src: /home/ubuntu/tomcat-users.xml
      dest: /etc/tomcat8
   - name: Change tomcat port from 9090 to 8080
     replace:
      regexp: 9090
      replace: 8080
      path: /etc/tomcat8/server.xml
   - name: Restart tomcat8
     service:
      name: tomcat8
      state: restarted
   - name: Pause for some time
     pause:
      minutes: 2
   - name: Check url response of tomcat on server1
     uri:
      url: http://172.31.37.220:8080
      status_code: 200
   - name: Check url response of tomcat on server2
     uri:
      url: http://172.31.36.172:8080

======================================================================
Day 6
======================================================================


Variables in Ansible
============================
Variables are classified into 3 types
1 Global scope variables
2 Host Scope variables
3 Play Scope variables

Global Scope Variables are defined from the command prompt using
"extra_vars" and they have the highest level of priority

vim playbook4.yml
---
- name: Installing s/w using gloabl scope vaiables
  hosts: all
  tasks:
   - name: Install/uninstall s/w
     apt:
      name: "{{a}}"
      state: "{{b}}"
      update_cache: "{{c}}"
...

To run the playbook and uninstall git
ansible-playbook playbook4.yml --extra-vars "a=git b=absent c=no" -b

We can use the same playbook to do some other activity Eg: install java
ansible-playbook playbook4.yml --extra-vars "a=openjdk-8-jdk b=present c=yes" -b

==============================================================================
vim playbook5.yml
---
- name: Create users and create files or dirs in users home dir using global variabl
  hosts: all
  tasks:
   - name: Create user
     user:
      name: "{{a}}"
      password: "{{b}}"
      home: "{{c}}"
   - name: Create files/dirs in users home dir
     file:
      name: "{{d}}"
      state: "{{e}}"
...

WE can use the above playbook tp create multiple users and files/dir in their homedir
ansible-playbook playbook5.yml --extra-vars "a=Ramu b=intelliqit c=/home/Ramu                                               d=/home/Ramu/dir1 e=directory" -b

ansible-playbook playbook5.yml --extra-vars "a=Harish b=intelliqit c=/home/Harish                                                  d=/home/Harish/file1 e=touch" -b

=============================================================================
Playscope Variables
These variables have the least priority and they are defined in the playbook
in the "vars" section.
vim playbook6.yml
---
- name: Install/uninstal
  hosts: all
  vars:
   - a: tomcat8
   - b: present
   - c: no
  tasks:
   - name: Install uninstall s/w packages
     apt:
      name: "{{a}}"
      state: "{{b}}"
      update_cache: "{{c}}"
...

The above playbook works like a template whose default behaviour is to 
install tomcat8 but we can bypass that behaviour and make it work on some
other sets of data by passing them as global scope variables

ansible-playbook playbook6.yml --extra-vars "a=firewalld b= absent c=no" -b

==============================================================================
Grouping in inventory file
sudo vim /etc/ansible/hosts
[webserver]
172.31.37.220
172.31.36.172
[apserver]
172.31.39.147
[dbserver]
172.31.45.75
172.31.36.172
[servers:children]
webserver
apserver

===============================================================================

Host Scope Variables
-----------------------
These variables are further classified into 2 types
1) Variables to work on a group of hosts
2) Variables to work on a single host

Variables to work on a group of hosts
=========================================
These variables are create in a directory "group_vars"
This directory is created in the same folder where the playbooks
are present.In the group_vars directory we create a file whose
name is same as group name from the inventory file

1 Go to the folder where the playbooks are present
  cd path_of_playbooks_folder

2 Create a directory group_vars and move into it
  mkdir group_vars
  cd group_vars

3 Create a file whose name is same as a group name from the inventory file
  vim webserver
  ---
  a: Usha
  b: intelliqit
  c: 1111
  d: /home/Usha
  ...

4 Go back to the folder where the playbooks are present
  cd ..
  
5 Create a playbook for using the above variables
vim playbook9.yml
---
- name: User creation using host scope variables
  hosts: webserver
  tasks:
   - name: Create user
     user:
      name: "{{a}}"
      password: "{{b}}"
      uid: "{{c}}"
      home: "{{d}}"

6 To execute the playbook
  ansible-playbook playbook9.yml -b

==========================================================================
Day 7
==========================================================================
Variables to work on a single host
--------------------------------------
These variables should be created in a file whose name is same as ip
address of a remote managed node and this file should be created in
a folder called "host_vars" and this folder should be created in the folder
where all our playbooks are present

1 Go to the folder where the playbooks are present
  cd path_of_playbooks_folder

2 Create a directory host_vars and move into it
  mkdir host_vars
  cd host_vars

3 Create a file whose name is same as a ipaddress of a managed node
  from the inventory file
  vim 172.31.56.218
  ---
  a: firewalld
  b: present
  c: no
  ...

4 Go back to the folder where the playbooks are present
  cd ..

5 Create a playbook to use the above varibles
vim playbook10.yml
---
- name: Install firewall using host scope varibles
  hosts: 172.31.56.218
  tasks:
   - name: Install firewall
     apt:
      name: "{{a}}"
      state: "{{b}}"
      update_cache: "{{c}}"
...

6 To run the playbook
  ansible-playbook playbook10.yml -b

=========================================================================
Day 8
========================================================================
Loops in Ansible
=========================
Loops can be implemented in Ansible using "with_items"
and "with_sequence"

Ansible playbook to install multiple s/w packages using loops
vim playbook10.yml
---
- name: Implementing loops
  hosts: all
  tasks:
   - name: Install s/w packages
     apt:
      name: "{{item}}"
      state: present
      update_cache: no
     with_items:
      - tree
      - git
      - maven
      - firewalld
...

====================================================================

Ansible playbook to install,uninstall upgrade multiple s/w
packages

---
- name: Implementing loops
  hosts: all
  tasks:
   - name: Install s/w packages
     apt:
      name: "{{item.a}}"
      state: "{{item.b}}"
      update_cache: "{{item.c}}"
     with_items:
      - {a: tree,b: present,c: no}
      - {a: git,b: absent,c: no}
      - {a: maven,b: latest,c: yes}
      - {a: firewalld,b: absent,c: no}
...

===============================================================
---
- name: Create multiple users and copy files into their home directories
  hosts: all
  tasks:
   - name: Create multiple users
     user:
      name: "{{item.a}}"
      password: "{{item.b}}"
      uid: "{{item.c}}"
      home: "{{item.d}}"
     with_items:
      - {a: Ravi,b: intelliqit,c: 9090,d: /home/ubuntu/Ravi}
      - {a: Mallika,b: intelliqit,c: 8080,d: /home/Mallika}
   - name: Copy passwd file and group file
     copy:
      src: "{{item.a}}"
      dest: "{{item.b}}"
     with_items:
      - {a: /etc/passwd,b: /home/ubuntu/Ravi}
      - {a: /etc/group,b: /home/Mallika}

===============================================================
When Conditions
======================
This is similar to "if conditions" ie based on a condition
a module will be executed

---
- name: Implementing when conditions
  hosts: all
  vars:
   - a: 20
  tasks:
   - name: Create file based on a condition
     file:
      name: /tmp/file56
      state: touch
     when: a == 20
...

===========================================================================
---
- name: Check if d1 directory is present if not create file d1
  hosts: all
  tasks:
   - name: Check if d1 directory is present
     stat:
      path: /tmp/d1
     register: cat
   - name: Display output of the above module
     debug:
      var: cat
   - name: Create file d1 if directory d1 is not present
     file:
      name: /tmp/d1
      state: touch
     when: cat.stat.exists == false 
...



























































































































































































































































 
  

























































































































 
















































































































































































































 































































































